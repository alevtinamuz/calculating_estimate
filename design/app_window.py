import os
from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                            QLabel, QPushButton, QSpacerItem, QSizePolicy, 
                            QTableWidgetItem, QTableWidget, QHeaderView, 
                            QMessageBox, QToolButton, QStackedWidget,
                            QTabWidget)
from PyQt6.QtCore import Qt, QEvent
from PyQt6.QtGui import QCursor
from PyQt6.QtCore import Qt
from supabase import create_client, Client
from dotenv import load_dotenv
import setters

from design.styles import MAIN_WINDOW_STYLE, LABEL_STYLE, BUTTON_STYLE, TABLE_STYLE, TOOL_BUTTON_STYLE, TAB_STYLE


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Calculating estimate")
        self.setStyleSheet(MAIN_WINDOW_STYLE)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        load_dotenv()
        self.supabase: Client = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_KEY")
        )
        # setters.add_work(self.supabase, 2, "–∫–∞—Ä–∞–∫—É–ª—è", 88.88, "—à—Ç")

        # setters.add_work(self.supabase, 2, "–∫–∞—Ä–∞–∫—É–ª—è", 88.88, "—à—Ç")
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        self.action_buttons = {}
        self.current_hovered_row = -1
        

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        central_widget.setStyleSheet(MAIN_WINDOW_STYLE)
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.create_page_db()
        self.create_page_estimate()
        self.update_buttons_position()
        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤–∫–ª–∞–¥–∫–∏
        self.tabs.addTab(self.page_db, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        self.tabs.addTab(self.page_estimate, "–°–º–µ—Ç–∞")

        self.setStyleSheet(TAB_STYLE)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        self.showMaximized()

    def create_page_db(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)"""
        self.page_db = QWidget()
        layout = QVBoxLayout()

        self.label = QLabel("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        self.label.setStyleSheet(LABEL_STYLE)
        layout.addWidget(self.label)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.table = QTableWidget()
        self.table.setStyleSheet(TABLE_STYLE)
        self.table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.table.setMouseTracking(True)  # –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏
        self.table.viewport().installEventFilter(self)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π
        
        layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.load_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_button.setStyleSheet(BUTTON_STYLE)
        self.load_button.clicked.connect(self.load_data_from_supabase)
        layout.addWidget(self.load_button)

        self.page_db.setLayout(layout)

    def create_page_estimate(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Å–º–µ—Ç–∞)"""
        self.page_estimate = QWidget()
        layout = QVBoxLayout()

        self.label_estimate = QLabel("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–º–µ—Ç—ã")
        self.label_estimate.setStyleSheet(LABEL_STYLE)
        layout.addWidget(self.label_estimate)

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ—Ç–æ–π

        self.page_estimate.setLayout(layout)
        
    def load_data_from_supabase(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            response = self.supabase.table('works').select('*').execute()
            data = response.data

            if not data:
                self.label.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            if not data:
                self.label.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–Ω–æ–ø–∫–∏
            self.table.clear()
            self.hide_all_tool_buttons()
            self.action_buttons.clear()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
            self.table.setRowCount(len(data))
            self.table.setColumnCount(len(data[0].keys()))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = list(data[0].keys())
            self.table.setHorizontalHeaderLabels(headers)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            for row_idx, row_data in enumerate(data):
                for col_idx, (key, value) in enumerate(row_data.items()):
                    item = QTableWidgetItem(str(value))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                    self.table.setItem(row_idx, col_idx, item)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                edit_btn = QToolButton()
                edit_btn.setObjectName("editToolButton")
                edit_btn.setStyleSheet(TOOL_BUTTON_STYLE)
                edit_btn.setText("‚úèÔ∏è")
                edit_btn.setToolTip("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                edit_btn.clicked.connect(lambda _, r=row_idx: self.edit_row(r))
                
                delete_btn = QToolButton()
                delete_btn.setObjectName("deleteToolButton")
                delete_btn.setStyleSheet(TOOL_BUTTON_STYLE)
                delete_btn.setText("üóëÔ∏è")
                delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å")
                delete_btn.clicked.connect(lambda _, r=row_idx: self.delete_row(r))
                
                # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä—Ö —Ç–∞–±–ª–∏—Ü—ã
                edit_btn.setParent(self.table.viewport())
                delete_btn.setParent(self.table.viewport())
                edit_btn.hide()
                delete_btn.hide()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
                self.action_buttons[row_idx] = (edit_btn, delete_btn)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            header = self.table.horizontalHeader()
            header.setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
            
            self.table.verticalHeader().setVisible(False)
            self.table.setShowGrid(False)
            self.table.setFrameShape(QTableWidget.Shape.NoFrame)
            
            self.label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            

            # –†–µ—Å–∞–π–∑ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            self.table.resizeColumnsToContents()
            self.label.setText("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        except Exception as e:
            self.label.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            print('Error:', e)
            
    def eventFilter(self, source, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
        if source is self.table.viewport():
            if event.type() == QEvent.Type.MouseMove:
                index = self.table.indexAt(event.pos())
                if index.isValid():
                    self.show_tool_buttons(index.row(), event.pos())
                else:
                    self.hide_all_tool_buttons()
            elif event.type() == QEvent.Type.Leave:
                self.hide_all_tool_buttons()
        return super().eventFilter(source, event)
      
    def show_tool_buttons(self, row, pos):
      """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –≤ –∫—Ä–∞–π–Ω–µ–π –ø—Ä–∞–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
      if row != self.current_hovered_row:
          self.hide_all_tool_buttons()
          self.current_hovered_row = row
          
          if row in self.action_buttons:
              edit_btn, delete_btn = self.action_buttons[row]
              
              # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
              rect = self.table.visualRect(self.table.model().index(row, 0))
              
              # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
              table_width = self.table.viewport().width()
              
              # –†–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫
              btn_width = edit_btn.sizeHint().width()
              spacing = 5
              
              # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫—Ä–∞–π–Ω–µ–π –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
              delete_btn.move(
                  table_width - btn_width - spacing,
                  rect.top() + (rect.height() - delete_btn.sizeHint().height()) // 2
              )
              
              edit_btn.move(
                  table_width - 2 * btn_width - 2 * spacing,
                  rect.top() + (rect.height() - edit_btn.sizeHint().height()) // 2
              )
              
              edit_btn.show()
              delete_btn.show()

    def hide_all_tool_buttons(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        self.current_hovered_row = -1
        for buttons in self.action_buttons.values():
            for btn in buttons:
                btn.hide()
    
    def edit_row(self, row):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏"""
        record_id = self.table.item(row, 0).text()
        print(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å ID: {record_id}")
        
    
    def delete_row(self, row):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏"""
        record_id = self.table.item(row, 0).text()
        
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID {record_id}?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                setters.delete_work(self.supabase, record_id)
                self.label.setText(f"–ó–∞–ø–∏—Å—å —Å ID {record_id} —É–¥–∞–ª–µ–Ω–∞")
                self.load_data_from_supabase()
            except Exception as e:
                self.label.setText(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                print('Error:', e)
                
    def update_buttons_position(self):
      """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"""
      if self.current_hovered_row >= 0:
          pos = self.table.viewport().mapFromGlobal(QCursor.pos())
          self.show_tool_buttons(self.current_hovered_row, pos)
          self.label.setText(f"–û—à–∏–±–∫–∞: {str(e)}")
